version: "3.9"

services:
  web:
    image: django
    container_name: covidgeo-debug-webserver
    user: "1000:1000"
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    working_dir: /code/covidgeo
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - ".:/code:Z"
      - "./data:/data:Z"
    restart: always
    environment:
      - DEBUG=True
      - POSTGRES_DATABASE=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=covidgeo123
    ports:
      - "8000:8000"
    depends_on:
      - "db"

  celery:
    image: django
    container_name: covidgeo-celery-worker
    user: "1000:1000"
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    working_dir: /code/covidgeo
    command: celery -A covidgeo worker --loglevel=INFO
    volumes:
      - ".:/code:Z"
      - "./data:/data:Z"
    restart: always
    environment:
      - DEBUG=False
      - POSTGRES_DATABASE=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=covidgeo123
    depends_on:
      - "db"
      - "redis"

  redis:
    image: redis:alpine3.14
    ports:
      - "6379:6379"
    restart: always

  db:
    image: postgis/postgis:13-3.1-alpine
    container_name: covidgeo-postgres
    # Both log_connections and log_disconnections can cause a lot of events if you donâ€™t have persistent connections, so enable with care.
    # command: postgres -c log_line_prefix="%m [%p] %q%u@%d " -c log_duration='on' -c log_statement='none' -c log_min_duration_statement=1000 -c log_checkpoints='on' -c log_connections='on' -c log_lock_waits='on'
    # this will send log to '/var/lib/postgresql/data/log'
    # command: postgres -c logging_collector='on' -c log_destination='csvlog'
    command: postgres -c logging_collector='on' -c log_line_prefix="%m [%p] %q%u@%d " -c log_duration='on' -c log_statement='none' -c log_min_duration_statement=1000 -c log_checkpoints='on' -c log_lock_waits='on'
    volumes:
      - db_data:/var/lib/postgresql/data:Z
    user: postgres
    restart: always
    environment:
      POSTGRES_DATABASE: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: covidgeo123
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

  kib01:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200","http://es02:9200","http://es03:9200"]'
    networks:
      - elastic

  filebeat:
    image: "docker.elastic.co/beats/filebeat:7.2.0"
    user: root
    volumes:
      - ./docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - db_data:/var/lib/postgresql/data:ro
    networks:
      - elastic

volumes:
  db_data:
    driver: local
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  elastic:
    driver: bridge
