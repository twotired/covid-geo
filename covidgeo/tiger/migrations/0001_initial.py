# Generated by Django 3.2.5 on 2021-08-06 03:15

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CongressionalDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statefp', models.CharField(help_text='state FIPS code', max_length=2)),
                ('cd116fp', models.CharField(help_text='116th congressional district FIPS code', max_length=2)),
                ('geoid', models.CharField(help_text='116th congressional district identifier; a concatenation of current state FIPS code and the 116th congressional district FIPS code', max_length=4)),
                ('namelsad', models.CharField(help_text='name and the translated legal/statistical area description for congressional district', max_length=41)),
                ('lsad', models.CharField(help_text='legal/statistical area description code for congressional district', max_length=2)),
                ('cdsessn', models.CharField(help_text='Congressional session code', max_length=3)),
                ('mtfcc', models.CharField(help_text='MAF/TIGER Feature Class Code (G5200)', max_length=5)),
                ('funcstat', models.CharField(help_text='Current functional status', max_length=1)),
                ('aland', models.BigIntegerField(help_text='land area')),
                ('awater', models.BigIntegerField(help_text='water area')),
                ('intptlat', models.CharField(help_text='latitude of the internal point', max_length=11)),
                ('intptlon', models.CharField(help_text='longitude of the internal point', max_length=12)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4269)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statefp', models.CharField(help_text='state FIPS code', max_length=2)),
                ('countyfp', models.CharField(help_text='county FIPS code', max_length=3)),
                ('countyns', models.CharField(help_text='ANSI feature code for the county or equivalent feature', max_length=8)),
                ('geoid', models.CharField(help_text='County identifier; a concatenation of Current state FIPS code and county FIPS code', max_length=5)),
                ('name', models.CharField(help_text='county name', max_length=100)),
                ('namelsad', models.CharField(help_text='name and the translated legal/statistical area description for county', max_length=100)),
                ('lsad', models.CharField(help_text='legal/statistical area description code for county', max_length=2)),
                ('classfp', models.CharField(help_text='FIPS class code', max_length=2)),
                ('mtfcc', models.CharField(help_text='MAF/TIGER Feature Class Code (G4020)', max_length=5)),
                ('csafp', models.CharField(help_text='combined statistical area code', max_length=3, null=True)),
                ('cbsafp', models.CharField(help_text='metropolitan statistical area/micropolitan statistical area code', max_length=5, null=True)),
                ('metdivfp', models.CharField(help_text='metropolitan division code', max_length=5, null=True)),
                ('funcstat', models.CharField(help_text='functional status', max_length=1)),
                ('aland', models.BigIntegerField(help_text='land area')),
                ('awater', models.BigIntegerField(help_text='water area')),
                ('intptlat', models.CharField(help_text='latitude of the internal point', max_length=11)),
                ('intptlon', models.CharField(help_text='longitude of the internal point', max_length=12)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4269)),
            ],
            options={
                'verbose_name_plural': 'Counties',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('region', models.CharField(help_text='region code', max_length=2)),
                ('division', models.CharField(help_text='division code', max_length=2)),
                ('statefp', models.CharField(help_text='state FIPS code', max_length=2)),
                ('statens', models.CharField(help_text='ANSI feature code for the state or equivalent entity', max_length=8)),
                ('geoid', models.CharField(help_text='State identifier; state FIPS code', max_length=2)),
                ('stusps', models.CharField(help_text='United States Postal Service state abbreviation', max_length=2, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='state name', max_length=100)),
                ('lsad', models.CharField(help_text='legal/statistical area description code for state', max_length=2)),
                ('mtfcc', models.CharField(help_text='MAF/TIGER Feature Class Code (G4000)', max_length=5)),
                ('funcstat', models.CharField(help_text='functional status', max_length=1)),
                ('aland', models.BigIntegerField(help_text='land area')),
                ('awater', models.BigIntegerField(help_text='water area')),
                ('intptlat', models.CharField(help_text='latitude of the internal point', max_length=11)),
                ('intptlon', models.CharField(help_text='longitude of the internal point', max_length=12)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4269)),
            ],
        ),
        migrations.CreateModel(
            name='UrbanArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uace10', models.CharField(help_text='2010 Census urban area code', max_length=5)),
                ('geoid10', models.CharField(help_text='2010 Census urban area identifier; 2010 Census urban area code', max_length=5)),
                ('name10', models.CharField(help_text='2010 Census urban area name', max_length=100)),
                ('namelsad10', models.CharField(help_text='2010 Census name and the translated legal/statistical area description for urban area', max_length=100)),
                ('lsad10', models.CharField(help_text='2010 Census legal/statistical area description code for urban area', max_length=2)),
                ('mtfcc10', models.CharField(help_text='MAF/TIGER Feature Class Code (G3500)', max_length=5)),
                ('uatyp10', models.CharField(help_text='2010 Census urban area type', max_length=1)),
                ('funcstat10', models.CharField(help_text='2010 Census functional status', max_length=1)),
                ('aland10', models.BigIntegerField(help_text='2010 Census land area')),
                ('awater10', models.BigIntegerField(help_text='2010 Census water area')),
                ('intptlat10', models.CharField(help_text='2010 Census latitude of the internal point', max_length=11)),
                ('intptlon10', models.CharField(help_text='2010 Census longitude of the internal point', max_length=12)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4269)),
            ],
            options={
                'verbose_name_plural': 'Urban Areas',
            },
        ),
    ]
